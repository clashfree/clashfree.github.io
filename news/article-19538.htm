<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://clashfree.github.io/news/article-19538.htm" />
<link rel="icon" href="__ADDON__/img/clashfree/favicon.ico" type="image/x-icon"/>
<title>docker-compose 配置kafka_Docker Compose 引用环境变量</title>
<meta name="description" content="在项目中，往往需要在 docker-compose.yml 文件中使用环境变量来控制不同的条件和使用场景。本文集中介绍 docker compose 引用环境变量的方式。说明：本文的演示环境为 ubu" />
<link rel="stylesheet" href="/assets/website/css/clashfree/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FVS49PB05G"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FVS49PB05G');
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home" data-page="detail">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Clash Free
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/website/js/frontend/clashfree/jquery-3.5.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/website/js/frontend/clashfree/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        docker-compose 配置kafka_Docker Compose 引用环境变量                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/news/" class="">新闻资讯 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                          				  				  				<div id="content_views" class="htmledit_views"> <div> <p>在项目中，往往需要在 docker-compose.yml 文件中使用环境变量来控制不同的条件和使用场景。本文集中介绍 docker compose 引用环境变量的方式。<br />说明：本文的演示环境为 ubuntu 16.04。</p> <h2><b>Compose CLI 与环境变量</b></h2> <p>Compose CLI(compose command-line 即 docker-compose 程序)能够识别名称为 COMPOSE_PROJECT_NAME 和 COMPOSE_FILE 等环境变量(具体支持的环境变量请参考<u>这里</u>)。比如我们可以通过这两个环境变量为 docker-compose 指定 project 的名称和配置文件：</p> <p>$ export COMPOSE_PROJECT_NAME=TestVar $ export COMPOSE_FILE=~/projects/composecounter/docker-compose.yml</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/86b5ca1bd1dc21757ae5e4b957e8e68f.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>然后启动应用，显示的 project 名称都是我们在环境变量中指定的：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/6b3d0dc8d6891928694cd520c1185b04.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>如果设置了环境变量的同时又指定了命令行选项，那么会应用命令行选项的设置：</p> <p>$ docker-compose -p nickproject up -d</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/224dfc6cfbc42c9482cf7e48ab51a51f.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <h2><b>在 compose file 中引用环境变量</b></h2> <p>我们还可以在 compose file 中直接引用环境变量，比如下面的 demo：</p> <p>version: '3' services: web: <b>image: ${IMAGETAG}</b> ports: - "5000:5000" redis: image: "redis:alpine"</p> <p>我们通过环境变量 ${IMAGETAG} 指定了 web 的镜像，下面通过 export 的方式来为 compose 配置文件中的环境变量传值：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/24baa70d0cf80df85828e3a2017d5ba2.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>注意，如果对应的环境变量没有被设置，那么 compose 就会把它替换为一个空字符串：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/42cfc54df5b94be6343deec574ddba2f.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>碰到这种情况，我们可以在 compose 的配置文件中为该变量设置一个默认值：</p> <p>version: '3' services: web: <b>image: ${IMAGETAG:-defaultwebimage}</b> ports: - "5000:5000" redis: image: "redis:alpine"</p> <p>这样，如果没有设置 IMAGETAG 变量，就会应用 defaultwebimage：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/83024c8aa8339dcd1723274b1a4a2bd4.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>除了这种方式，我们还可以通过后面将介绍的 .env 文件来为环境变量设置默认值。</p> <h2><b>把环境变量传递给容器</b></h2> <p>先来看一下在 compose file 中如何为容器设置环境变量：</p> <p>web: <b>environment: DEBUG: 1</b></p> <p>compose file 中的 environment 节点用来为容器设置环境变量，上面的写法等同于：</p> <p>$ docker run <b>-e DEBUG=1</b></p> <p>要把当前 shell 环境变量的值传递给容器的环境变量也很简单，去掉上面代码中的赋值部分就可以了：</p> <p>web: <b>environment: DEBUG:</b></p> <p>这种情况下，如果没有在当前的 shell 中导出环境变量 DEBUG，compose file 中会把它解释为 null：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/aeb3061bf70bd14b1e3342cf9c1daa2d.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>在试试导出环境变量 DEBUG 的情况：</p> <p>$ export DEBUG=1</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/236def0f21b1fb831d5fa508ace75f1b.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>这才是我们设计的正确的使用场景！</p> <h2><b>使用文件为容器设置多个环境变量</b></h2> <p>如果觉得通过 environment 为容器设置环境变量不够过瘾，我们还可以像 docker -run 的 --env-file 参数一样通过文件为容器设置环境变量：</p> <p>web: env_file: <b>- web-variables.env</b></p> <p>注意，web-variables.env 文件的路径是相对于 docker-compose.yml 文件的相对路径。上面的代码效果与下面的代码相同：</p> <p>$ docker run <b>--env-file=web-variables.env</b></p> <p>web-variables.env 文件中可以定义一个或多个环境变量：</p> <p># define web container env APPNAME=helloworld AUTHOR=Nick Li VERSION=1.0</p> <p>检查下结果：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/e8c95beca7b0042820d86d8c48562ee8.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>原来 compose 把 env_file 的设置翻译成了 environment！</p> <h2><b>.env 文件</b></h2> <p>当我们在 docker-compose.yml 文件中引用了大量的环境变量时，对每个环境变量都设置默认值将是繁琐的，并且也会影响 docker-compose.yml 简洁程度。此时我们可以通过 .env 文件来为 docker-compose.yml 文件引用的所有环境变量设置默认值！<br />修改 docker-compose.yml 文件的内容如下：</p> <p>version: '3' services: web: image: ${IMAGETAG} environment: APPNAME: AUTHOR: VERSION: ports: - "5000:5000" redis: image: "redis:alpine"</p> <p>然后在相同的目录下创建 .env 文件，编辑其内容如下：</p> <p># define env var default value. IMAGETAG=defaultwebimage APPNAME=default app name AUTHOR=default author name VERSION=default version is 1.0</p> <p>检查下结果，此时所有的环境变量都显示为 .env 文件中定义的默认值：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/f8186f9d5c16bcbf7ca0323cf9219f3c.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <h2><b>配置不同场景下的环境变量</b></h2> <p>从前面的部分中我们可以看到，docker compose 提供了足够的灵活性来让我们设置 docker-compose.yml 文件中引用的环境变量，它们的优先级如下：</p> <ol> <li>Compose file</li> <li><b>Shell environment variables</b></li> <li>Environment file</li> <li>Dockerfile</li> <li>Variable is not defined</li> </ol> <p><b>首先</b>，在 docker-compose.yml 文件中直接设置的值优先级是最高的。<b>然后</b>是在当前 shell 中 export 的环境变量值。<b>接下来</b>是在环境变量文件中定义的值。<b>再接下来</b>是在 Dockerfile 中定义的值。<b>最后</b>还没有找到相关的环境变量就认为该环境变量没有被定义。</p> <p>根据上面的优先级定义，我们可以把不同场景下的环境变量定义在不同的 shell 脚本中并导出，然后在执行 docker-compose 命令前先执行 source 命令把 shell 脚本中定义的环境变量导出到当前的 shell 中。通过这样的方式可以减少维护环境变量的地方，下面的例子中我们分别在 docker-compose.yml 文件所在的目录创建 test.sh 和 prod.sh，test.sh 的内容如下：</p> <p>#!/bin/bash # define env var default value. export IMAGETAG=web:v1 export APPNAME=HelloWorld export AUTHOR=Nick Li export VERSION=1.0</p> <p>prod.sh 的内容如下：</p> <p>#!/bin/bash # define env var default value. export IMAGETAG=webpord:v1 export APPNAME=HelloWorldProd export AUTHOR=Nick Li export VERSION=1.0LTS</p> <p>在测试环境下，执行下面的命令：</p> <p>$ source test.sh $ docker-compose config</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/dd94217e177537c1f46ba5b777e8abcf.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>此时 docker-compose.yml 中的环境变量应用的都是测试环境相关的设置。</p> <p>而在生产环境下，执行下面的命令：</p> <p>$ source prod.sh $ docker-compose config</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/a61827c403cf5c4907a5d9cfdc954bfc.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>此时 docker-compose.yml 中的环境变量应用的都是生产环境相关的设置。</p> <h2><b>总结</b></h2> <p>docker compose 对环境变量的使用提供了非常丰富支持和灵活的使用方式。希望通过本文的总结可以帮助大家理清相关的用法，并能够以简洁的方式为不同的使用场景提供支持。</p> <p>欢迎工作一到五年的Java工程师朋友们加入Java程序员开发： 854393687</p> <p>群内提供免费的Java架构学习资料（里面有高可用、高并发、高性能及分布式、Jvm性能调优、Spring源码，MyBatis，Netty,Redis,Kafka,Mysql,Zookeeper,Tomcat,Docker,Dubbo,Nginx等多个知识点的架构资料）合理利用自己每一分每一秒的时间来学习提升自己，不要再用"没有时间“来掩饰自己思想上的懒惰！趁年轻，使劲拼，给未来的自己一个交代！</p> </div></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-19079.htm">人用针剂跟畜用针剂一样吗（人用针剂跟畜用针剂一样吗有毒吗）</a></p>
                                        <p>下一个：<a href="/news/article-19539.htm">中国知名兽药（中国知名兽药公司排名）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-6-21-free-node-subscribe-links.htm" title="6月21日 | 最新Clash/V2ray/SSR/Shadowrocket高速免费节点，最高速度22.7M/S">6月21日 | 最新Clash/V2ray/SSR/Shadowrocket高速免费节点，最高速度22.7M/S</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-28-free-v2ray.htm" title="9月28日 | 最新Clash/Shadowrocket/SSR/V2ray高速免费节点，最高速度20.1M/S">9月28日 | 最新Clash/Shadowrocket/SSR/V2ray高速免费节点，最高速度20.1M/S</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-5-4-free-node-subscribe-links.htm" title="5月4日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度22.2M/S">5月4日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度22.2M/S</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-3-13-free-ssr-node.htm" title="3月13日18M/S|SSR/Clash/V2ray/Shadowrocket免费节点每天更新订阅链接">3月13日18M/S|SSR/Clash/V2ray/Shadowrocket免费节点每天更新订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-2-clash-v2ray-ss-ssr.htm" title="11月2日 | 最新Clash/V2ray/SSR/Shadowrocket高速免费节点，最高速度21.2M/S，便宜机场推荐">11月2日 | 最新Clash/V2ray/SSR/Shadowrocket高速免费节点，最高速度21.2M/S，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-3-clash-windows.htm" title="8月3日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度21.7M/S">8月3日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度21.7M/S</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-27-node-share.htm" title="11月27日 | 最新SSR/Shadowrocket/Clash/V2ray高速免费节点，最高速度22.7M/S，便宜机场推荐">11月27日 | 最新SSR/Shadowrocket/Clash/V2ray高速免费节点，最高速度22.7M/S，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-31-free-node-subscribe-links.htm" title="8月31日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度19.3M/S">8月31日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度19.3M/S</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-19-node-share-links.htm" title="11月19日 | 最新Shadowrocket/V2ray/Clash/SSR高速免费节点，最高速度19.7M/S，便宜机场推荐">11月19日 | 最新Shadowrocket/V2ray/Clash/SSR高速免费节点，最高速度19.7M/S，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-12-free-shadowrocket-node.htm" title="10月12日 | 最新Clash/V2ray/SSR/Shadowrocket高速免费节点，最高速度18.4M/S">10月12日 | 最新Clash/V2ray/SSR/Shadowrocket高速免费节点，最高速度18.4M/S</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                <p class="col-lg-8 copy-footer-29">
                    ClashFree节点免费订阅站 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>