<!doctype html>
<html lang="zh-CN">

<head>
    <!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="canonical" href="https://clashfree.github.io/news/article-40793.htm" />
<link rel="icon" href="/assets/website/img/clashfree/favicon.ico" type="image/x-icon"/>
<title>源码中的设计模式&#8211;装饰器模式_在线工具</title>
<meta name="description" content="有一句很经典的小品台词是“换个马甲我就不认识你了吗”，哈哈，这个比方正好用在今天要分享的装饰器模式上。先看下《head first 设计模式》中给的释义。  装饰者模式&nbsp; 动态地将责任附加到" />
<link rel="stylesheet" href="/assets/website/css/clashfree/style-starter.css">
<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FVS49PB05G"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FVS49PB05G');
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home" data-page="detail">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Clash Free
                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/website/js/frontend/clashfree/jquery-3.5.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/website/js/frontend/clashfree/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        源码中的设计模式&#8211;装饰器模式_在线工具                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/news/" class="">新闻资讯 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p>有一句很经典的小品台词是“换个马甲我就不认识你了吗”，哈哈，这个比方正好用在今天要分享的装饰器模式上。先看下《head first 设计模式》中给的释义。</p> <blockquote> <p><strong><span style="font-size: 18pt">装饰者模式</span></strong>&nbsp; 动态地将责任附加到对象上。若要扩展功能，装饰者提供了比基层更有弹性的替代方案。</p> </blockquote> <p>细心的小伙伴发现了这个释义怎么是装饰者模式，今天说的不是装饰器模式吗，其实这两个名称所代表的意思是一样的，为了保持和书上一致这里是装饰者模式，后续统一称为装饰器。</p> <p>这个释义太抽象太理论了，下面通俗的讲下。说到“装饰”二字，肯定第一时间想到的就是要有装饰者和被装饰者，正如前面说到的“换个马甲我就不认识你了吗”，这里的马甲可以理解为装饰者，穿马甲的就是被装饰者，放到装饰器模式里稍微有些不同，我们继续往下说。“装饰”，可以简单的理解为“伪装”，可以伪装成另外一个样子，也可以伪装成某种不同于原物的一种行为，所以在装饰者和被装饰者之间肯定存在某种相似，才可以使用装饰物去装饰被装饰者。用在java的设计模式中，我们讲的更多的是行为，也就是一个类所能完成的操作是可以用来装饰的。</p> <p>下面简单的根据一个UML图来了解下装饰器模式，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/bd17abc4908a0a7925ebc15eb3b1ee34.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>上图中Component是一个接口，有两个方法methodA、methodB，有三个实现类ComponentA、ComponentB、ComponentDecoratorA，可以看到ComponentDecoratorA和其他两个实现类是不一样的，它有一个Component的属性，其他的从UML中看不出其他，当然在methodA、methodB方法中别有洞天，后面会说到。这里的CompoentDecoratorA其实就是一个装饰器类，任何实现了Component接口的类，都可以被它装饰，完成相应的功能。</p> <p><strong>可以看到装饰器模式中有实现（继承），还有组合。</strong></p> </h1> <p>上面对装饰器模式已经大体有了一个了解，下面通过一个具体的例子来实现一个简单的装饰器模式。</p> <p>Component.java</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.decorator;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span><span style="color: rgba(0, 0, 0, 1)"> Component {     String methodA(String params);</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> methodB(); }</span></pre> </div> <p>ComponentA.java</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.decorator;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> ComponentA<span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> Component{     //返回字符串     @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String methodA(String params) {</span><span style="color: rgba(0, 0, 255, 1)">return</span> "ComponentA methodA"<span style="color: rgba(0, 0, 0, 1)">;     }     //打印字符串     @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> methodB() {         System.out.println(</span>"ComponentA methodB"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></pre> </div> <p>ComponentB.java</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.decorator;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> ComponentB<span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> Component{</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">返回字符串</span><span style="color: rgba(0, 0, 0, 1)">    @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String methodA(String params) {</span><span style="color: rgba(0, 0, 255, 1)">return</span> "ComponentB methodA"<span style="color: rgba(0, 0, 0, 1)">;     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">打印字符串</span><span style="color: rgba(0, 0, 0, 1)">    @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> methodB() {         System.out.println(</span>"ComponentB methodB"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></pre> </div> <p>ComponentDecoratorA.java</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.decorator;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> ComponentDecoratorA<span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> Component{</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Component的实例</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Component component;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">构造函数</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ComponentDecoratorA(Component component){</span><span style="color: rgba(0, 0, 255, 1)">this</span>.component=<span style="color: rgba(0, 0, 0, 1)">component;     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">调用component的methodA方法，返回字符串</span><span style="color: rgba(0, 0, 0, 1)">    @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String methodA(String params) {         String decoratorStr</span>=<span style="color: rgba(0, 0, 0, 1)">component.methodA(params);</span><span style="color: rgba(0, 0, 255, 1)">return</span> "ComponentDecoratorA methodA,"+<span style="color: rgba(0, 0, 0, 1)">decoratorStr;     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">调用component的methodB方法，打印字符串</span><span style="color: rgba(0, 0, 0, 1)">    @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> methodB() {         component.methodB();         System.out.println(</span>"ComponentDecoratorA methodB"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></pre> </div> <p>下面看测试代码，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.decorator;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> TestDecorator {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">一个Component实例，被包装的实例</span>         Component component=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ComponentA();</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使用ComponentDecoratorA进行包装</span>         Component component1=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ComponentDecoratorA(component);         String str</span>=component1.methodA(""<span style="color: rgba(0, 0, 0, 1)">);         System.out.println(str);     } }</span></pre> </div> <p>看下测试结果，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">ComponentDecoratorA methodA,ComponentA methodA  Process finished with exit code</span>0</pre> </div> <p>符合测试预期。</p> <p>很简单吧，这就是装饰器模式，总结以下要点，</p> <p><strong>1、装饰者和被装饰者要实现统一的接口；</strong></p> <p><strong>2、在装饰者对象中持有被装饰者的对象实例；</strong></p> <p><strong>3、在装饰者行为中，主动调用被装饰者行为；</strong></p> <p>很多小伙伴会问，装饰者和被装饰者必须实现统一的接口(interface)吗，使用抽象类可以吗，其实是可以的，上述的接口可以理解为接口和抽象类，我们说只要他们有共同的行为即可，不必太拘泥于定义。</p> <p>另外，<strong>在装饰器模式中，运用了实现（继承）和组合设计原则</strong>。</p> </h1> <p>上面我们已经学会了使用装饰器模式，让我们继续在源码中找寻它的影子，学习下优秀的人是怎么使用装饰器模式的，让我们的代码越来越好。</p> <h2>1、java文件系统</h2> <p>在Java实现的API中已经有了装饰器模式的使用，而且在日常开发中很常用，不知道你注意到没有，如果没有下次在使用文件操作类的时候可以留心下哦。</p> <p>在java的文件系统中，有字节流和字符流，又分为输入和输出，分别是InputStream、OutputStream、Reader、Writer。以InputStream来举例吧，在inputStream下有一个FilterInputStream，这是一个抽象类，该类便是一个装饰者类的接口，装饰所有实现了InputStream的类，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/07094dd8c3eada864b90af5e702f2b05.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>另外，这里的InputStream是抽象类，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/4d741288645ca0e3bf09cb2f36fbefed.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>看下其重要的read方法，在装饰者FilterInputStream中是怎么实现的，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/874a8d0357e43d42b7e040bc82a33b85.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>可以看到调用的是具体被装饰者的read方法，由于FilterInputStream是抽象的，我们看下其具体的一个实现类也就是具体的一个装饰者的实现，看下BufferedInputStream，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> BufferedInputStream<span style="color: rgba(0, 0, 255, 1)">extends</span><span style="color: rgba(0, 0, 0, 1)"> FilterInputStream {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">默认的缓冲大小</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">int</span> DEFAULT_BUFFER_SIZE = 8192<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">int</span> MAX_BUFFER_SIZE = Integer.MAX_VALUE - 8<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">缓存区</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">volatile</span><span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)"> buf[];</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> count;</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> pos;</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">int</span> markpos = -1<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> marklimit;</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * Creates a &lt;code&gt;BufferedInputStream&lt;/code&gt;      * and saves its  argument, the input stream      * &lt;code&gt;in&lt;/code&gt;, for later use. An internal      * buffer array is created and  stored in &lt;code&gt;buf&lt;/code&gt;.      *      *</span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)">   in   the underlying input stream.</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> BufferedInputStream(InputStream in) {</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">(in, DEFAULT_BUFFER_SIZE);     }</span></pre> </div> <p>该类的代码有删改，可以看到BufferedInputStream中定义了很多属性，这些数据都是为了可缓冲读取来作准备的，看到其有构造方法会传入一个InputStream的实例。实际编码如下</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">被装饰的对象，文件输入流</span> InputStream in=<span style="color: rgba(0, 0, 255, 1)">new</span> FileInputStream("/root/doc/123.txt"<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">装饰对象，可缓冲</span> InputStream bufferedIn=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> BufferedInputStream(in); bufferedIn.read();</span></pre> </div> <p>上面的代码便使用的装饰器模式进行的可缓冲的文件读取，代码很眼熟吧，其实你已经使用了装饰器模式。</p> <p>上面仅是拿InputStream进行了举例说明其实，在java的IO系统中，FilterInputStream、FilterOutputStream、FilterReader、FilterWriter抽象类都是装饰器模式的体现，其抽象类的子类都是装饰者类。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/bdff61d44e9e3d1029b8bacf43573e45.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <h2>2、mybatis缓存系统</h2> <p>mybatis自带一级缓存，其缓存设计就是使用的装饰器模式，我们先来看下其cache接口</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/e2c4695f31eab5e82e4fd6e449fe21c2.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>上图红框中标出的是Cache接口的直接实现PerpetualCache，这个类可以作为被装饰者，再看其他的实现均在org.apache.ibatis.cache.decorators包中，那么也就是装饰者，看下LruCache的实现，仅贴出部分代码，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> LruCache<span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> Cache {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Cache实例</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> Cache delegate;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">实现LRU算法的辅助map</span><span style="color: rgba(0, 0, 255, 1)">private</span> Map&lt;Object, Object&gt;<span style="color: rgba(0, 0, 0, 1)"> keyMap;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Object eldestKey;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">构造函数，传入一个Cache，用来初始胡delegate和其他参数</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> LruCache(Cache delegate) {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.delegate =<span style="color: rgba(0, 0, 0, 1)"> delegate;</span><span style="color: rgba(0, 0, 255, 1)">this</span>.setSize(1024<span style="color: rgba(0, 0, 0, 1)">);     } }</span></pre> </div> <p>这个代码和最开始演示的Component的那个例子很像，至于LRU缓存怎么实现的，各位小伙伴可以自行了解。下次再使用到mybatis的缓存，你就可以自豪的说这是装饰器模式。</p> <h2>3、mybatis的Executor执行器</h2> <p>在mybatis中真正负责执行sql语句的是Executor接口，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/49da0ed5c48100c7fd53a8c278502323.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>该接口有以下几个实现类：CachingExecutor、BaseExecutor、SimpleExecutor等，重点看下CachingExecutor、SimpleExecutor</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/2f4706c7804d0fc1656834d74b5c059e.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>CachingExecutor应该是装饰者，看下SimpleExecutor</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/a088e2d633a02651d6a4e59df06915ca.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>这个应该是被装饰者，它在执行具体的操作。</p> </h1> <p>本文分享了装饰器模式及在源码中的使用，需要几种以下几点，</p> <p><strong>1、装饰者和被装饰者要实现统一的接口；</strong></p> <p><strong>2、在装饰者对象中持有被装饰者的对象实例；</strong></p> <p><strong>3、在装饰者行为中，主动调用被装饰者行为；</strong></p> <p><strong>装饰器模式很好的体现了继承（实现）和组合的设计原则。</strong></p> <p><strong><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/833c7ca1d6425db073292435ded0218c.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></strong></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-40792.htm">JavaScript实现带有开始、暂停、复位的秒表</a></p>
                                        <p>下一个：<a href="/news/article-41300.htm">PyMySQL中where __ in__ 的用法</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-30655.htm" title="穷人养猫还是富人养猫（穷人养猫富人养狗）">穷人养猫还是富人养猫（穷人养猫富人养狗）</a></li>
                        <li class="py-2"><a href="/news/article-32556.htm" title="穷人家养什么狗（人穷养什么宠物好呢）">穷人家养什么狗（人穷养什么宠物好呢）</a></li>
                        <li class="py-2"><a href="/news/article-23660.htm" title="办理宠物食品厂需要什么手续 办理宠物食品厂需要什么手续和证件">办理宠物食品厂需要什么手续 办理宠物食品厂需要什么手续和证件</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-24-node-share-links.htm" title="10月24日 | 最新SSR/Clash/Shadowrocket/V2ray高速免费节点，最高速度22.7M/S，便宜机场推荐">10月24日 | 最新SSR/Clash/Shadowrocket/V2ray高速免费节点，最高速度22.7M/S，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-41787.htm" title="SDDC的Windows初体验-QT篇">SDDC的Windows初体验-QT篇</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-5-clash-windows.htm" title="1月5日 | 最新SSR/Shadowrocket/Clash/V2ray高速免费节点地址，最高速度19.6M/S，便宜机场推荐">1月5日 | 最新SSR/Shadowrocket/Clash/V2ray高速免费节点地址，最高速度19.6M/S，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-27378.htm" title="动物防疫疫苗的运输规定最新消息（动物防疫疫苗的运输规定最新消息通知）">动物防疫疫苗的运输规定最新消息（动物防疫疫苗的运输规定最新消息通知）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-20-free-v2ray-subscribe.htm" title="11月20日 | 最新V2ray/Shadowrocket/Clash/SSR高速免费节点，最高速度21M/S，便宜机场推荐">11月20日 | 最新V2ray/Shadowrocket/Clash/SSR高速免费节点，最高速度21M/S，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-40793.htm" title="源码中的设计模式&#8211;装饰器模式_在线工具">源码中的设计模式&#8211;装饰器模式_在线工具</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-16-free-high-speed-nodes.htm" title="12月16日 | 最新V2ray/Clash/SSR/Shadowrocket高速免费节点，最高速度18.7M/S，便宜机场推荐">12月16日 | 最新V2ray/Clash/SSR/Shadowrocket高速免费节点，最高速度18.7M/S，便宜机场推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">51</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="col-lg-8 copy-footer-29">
                    ClashFree节点免费订阅站 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>