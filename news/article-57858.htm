<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
    	<!-- Required meta tags -->
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
	<link rel="canonical" href="https://clashfree.github.io/news/article-57858.htm" />
	<link rel="icon" href="/assets/website/img/clashfree/favicon.ico" type="image/x-icon"/>
	<title>Spring Boot整合Kafka的简单用例(@KafkaListener注解)</title>
		<meta name="description" content="第一步、启动zookeeper server和kafka server 启动zookeeper server：bin/zookeeper-server-start.sh config/zookeepe" />
	
    <meta name="author" content="ClashFree节点免费订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashfree.github.io/news/article-57858.htm" />
    <meta property="og:site_name" content="ClashFree节点免费订阅站" />
    <meta property="og:title" content="Spring Boot整合Kafka的简单用例(@KafkaListener注解)" />
    <meta property="og:image" content="https://clashfree.github.io/uploads/20240303/294a9eb787d50cdc6560df826d65f17b.webp" />
        <meta property="og:release_date" content="2025-02-17T09:55:33" />
    <meta property="og:updated_time" content="2025-02-17T09:55:33" />
        <meta property="og:description" content="第一步、启动zookeeper server和kafka server 启动zookeeper server：bin/zookeeper-server-start.sh config/zookeepe" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Spring Boot整合Kafka的简单用例(@KafkaListener注解)">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
	<link rel="stylesheet" href="/assets/website/css/clashfree/style-starter.css">
	<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
	<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
	<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
	<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FVS49PB05G"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FVS49PB05G');
</script>
	<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home" data-page="detail">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        Clash Free                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/website/js/frontend/clashfree/jquery-3.5.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/website/js/frontend/clashfree/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        Spring Boot整合Kafka的简单用例(@KafkaListener注解)                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/news/" class="">新闻资讯 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h2 id="第一步启动zookeeper-server和kafka-server"><strong>第一步、启动zookeeper server和kafka server</strong></h2> <p>启动zookeeper server：bin/zookeeper-server-start.sh config/zookeeper.properties<br /> 启动两个kafka server：bin/kafka-server-start.sh config/server-1.properties；<br /> bin/kafka-server-start.sh config/server.properties<br /> zookeeper会选举一个作为leader，另外一个作为slave</p> <h2 id="第二步创建一个maven项目"><strong>第二步、创建一个maven项目</strong></h2> <p>这一篇中修改了Spring Boot的版本为2.0.0，pom.xml如下：</p> <pre class="prettyprint"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">dependencyManagement</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">dependencies</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>2.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-title">type</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-title">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">dependencyManagement</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">dependencies</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>2.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre> <h2 id="第三步kafka配置"><strong>第三步、kafka配置</strong></h2> <pre class="prettyprint"><code class="hljs java"><span class="hljs-annotation">@Configuration</span><span class="hljs-annotation">@EnableKafka</span><span class="hljs-keyword">public</span><span class="hljs-class"><span class="hljs-keyword">class</span><span class="hljs-title">KafkaConfig</span> {<!-- --></span><span class="hljs-comment">/* --------------producer configuration-----------------**/</span><span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> Map&lt;String, Object&gt;<span class="hljs-title">producerConfigs</span>() {         Map&lt;String, Object&gt; props =<span class="hljs-keyword">new</span> HashMap&lt;&gt;();         props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="hljs-string">"localhost:9092,localhost:9093"</span>);         props.put(ProducerConfig.RETRIES_CONFIG,<span class="hljs-number">0</span>);         props.put(ProducerConfig.BATCH_SIZE_CONFIG,<span class="hljs-number">16384</span>);         props.put(ProducerConfig.LINGER_MS_CONFIG,<span class="hljs-number">1</span>);         props.put(ProducerConfig.BUFFER_MEMORY_CONFIG,<span class="hljs-number">33554432</span>);         props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);         props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);<span class="hljs-keyword">return</span> props;     }<span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> ProducerFactory&lt;String, String&gt;<span class="hljs-title">producerFactory</span>() {<span class="hljs-keyword">return</span><span class="hljs-keyword">new</span> DefaultKafkaProducerFactory&lt;&gt;(producerConfigs());     }<span class="hljs-comment">/* --------------consumer configuration-----------------**/</span><span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> Map&lt;String, Object&gt;<span class="hljs-title">consumerConfigs</span>() {         Map&lt;String, Object&gt; props =<span class="hljs-keyword">new</span> HashMap&lt;&gt;();         props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="hljs-string">"localhost:9092,localhost:9093"</span>);         props.put(ConsumerConfig.GROUP_ID_CONFIG,<span class="hljs-string">"0"</span>);         props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,<span class="hljs-keyword">true</span>);         props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG,<span class="hljs-number">100</span>);         props.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG,<span class="hljs-string">"15000"</span>);         props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);         props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);<span class="hljs-keyword">return</span> props;     }<span class="hljs-annotation">@Bean</span>     ConcurrentKafkaListenerContainerFactory&lt;String, String&gt;     kafkaListenerContainerFactory() {         ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory =<span class="hljs-keyword">new</span> ConcurrentKafkaListenerContainerFactory&lt;&gt;();         factory.setConsumerFactory(consumerFactory());<span class="hljs-keyword">return</span> factory;     }<span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> ConsumerFactory&lt;String, String&gt;<span class="hljs-title">consumerFactory</span>() {<span class="hljs-keyword">return</span><span class="hljs-keyword">new</span> DefaultKafkaConsumerFactory&lt;&gt;(consumerConfigs());     }<span class="hljs-annotation">@Bean</span><span class="hljs-comment">//消息监听器</span><span class="hljs-keyword">public</span> MyListener<span class="hljs-title">myListener</span>() {<span class="hljs-keyword">return</span><span class="hljs-keyword">new</span> MyListener();     }<span class="hljs-comment">/* --------------kafka template configuration-----------------**/</span><span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> KafkaTemplate&lt;String,String&gt;<span class="hljs-title">kafkaTemplate</span>() {         KafkaTemplate&lt;String, String&gt; kafkaTemplate =<span class="hljs-keyword">new</span> KafkaTemplate&lt;&gt;(producerFactory());<span class="hljs-keyword">return</span> kafkaTemplate;     }  }</code></pre> <h2 id="第四步topic的配置"><strong>第四步、topic的配置</strong></h2> <p><strong>自动创建的topic分区数是1，复制因子是0</strong></p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-annotation">@Configuration</span><span class="hljs-annotation">@EnableKafka</span><span class="hljs-keyword">public</span><span class="hljs-class"><span class="hljs-keyword">class</span><span class="hljs-title">TopicConfig</span> {<!-- --></span><span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> KafkaAdmin<span class="hljs-title">kafkaAdmin</span>() {         Map&lt;String, Object&gt; configs =<span class="hljs-keyword">new</span> HashMap&lt;&gt;();         configs.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="hljs-string">"localhost:9092,localhost:9093"</span>);<span class="hljs-keyword">return</span><span class="hljs-keyword">new</span> KafkaAdmin(configs);     }<span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> NewTopic<span class="hljs-title">foo</span>() {         /第一个是参数是topic名字，第二个参数是分区个数，第三个是topic的复制因子个数<span class="hljs-comment">//当broker个数为1个时会创建topic失败，</span><span class="hljs-comment">//提示：replication factor: 2 larger than available brokers: 1</span><span class="hljs-comment">//只有在集群中才能使用kafka的备份功能</span><span class="hljs-keyword">return</span><span class="hljs-keyword">new</span> NewTopic(<span class="hljs-string">"foo"</span>,<span class="hljs-number">10</span>, (<span class="hljs-keyword">short</span>)<span class="hljs-number">2</span>);     }<span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> NewTopic<span class="hljs-title">bar</span>() {<span class="hljs-keyword">return</span><span class="hljs-keyword">new</span> NewTopic(<span class="hljs-string">"bar"</span>,<span class="hljs-number">10</span>, (<span class="hljs-keyword">short</span>)<span class="hljs-number">2</span>);     }<span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> NewTopic<span class="hljs-title">topic1</span>(){<span class="hljs-keyword">return</span><span class="hljs-keyword">new</span> NewTopic(<span class="hljs-string">"topic1"</span>,<span class="hljs-number">10</span>, (<span class="hljs-keyword">short</span>)<span class="hljs-number">2</span>);     }<span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> NewTopic<span class="hljs-title">topic2</span>(){<span class="hljs-keyword">return</span><span class="hljs-keyword">new</span> NewTopic(<span class="hljs-string">"topic2"</span>,<span class="hljs-number">10</span>, (<span class="hljs-keyword">short</span>)<span class="hljs-number">2</span>);     } }</code></pre> <h2 id="第五步使用kafkalistener注解"><strong>第五步、使用@KafkaListener注解</strong></h2> <p><strong>topicPartitions和topics、topicPattern不能同时使用</strong></p> <pre class="prettyprint"><code class="hljs cs"><span class="hljs-keyword">public</span><span class="hljs-keyword">class</span> MyListener {     @KafkaListener(id =<span class="hljs-string">"myContainer1"</span>,<span class="hljs-comment">//id是消费者监听容器</span>             topicPartitions =<span class="hljs-comment">//配置topic和分区：监听两个topic，分别为topic1、topic2，topic1只接收分区0，3的消息，</span><span class="hljs-comment">//topic2接收分区0和分区1的消息，但是分区1的消费者初始位置为5</span>             { @TopicPartition(topic =<span class="hljs-string">"topic1"</span>, partitions = {<span class="hljs-string">"0"</span>,<span class="hljs-string">"3"</span> }),                     @TopicPartition(topic =<span class="hljs-string">"topic2"</span>, partitions =<span class="hljs-string">"0"</span>,                             partitionOffsets = @PartitionOffset(partition =<span class="hljs-string">"1"</span>, initialOffset =<span class="hljs-string">"4"</span>))             })<span class="hljs-keyword">public</span><span class="hljs-keyword">void</span><span class="hljs-title">listen</span>(ConsumerRecord&lt;?, ?&gt; record) {         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"topic"</span> + record.topic());         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"key:"</span> + record.key());         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"value:"</span>+record.<span class="hljs-keyword">value</span>());     }       @KafkaListener(id =<span class="hljs-string">"myContainer2"</span>,topics = {<!-- --><span class="hljs-string">"foo"</span>,<span class="hljs-string">"bar"</span>})<span class="hljs-keyword">public</span><span class="hljs-keyword">void</span><span class="hljs-title">listen2</span>(ConsumerRecord&lt;?, ?&gt; record){         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"topic："</span> + record.topic());         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"key:"</span> + record.key());         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"value:"</span>+record.<span class="hljs-keyword">value</span>());     } }</code></pre> <h2 id="第六步创建发送消息的接口"><strong>第六步、创建发送消息的接口</strong></h2> <pre class="prettyprint"><code class="hljs java"><span class="hljs-annotation">@RestController</span><span class="hljs-keyword">public</span><span class="hljs-class"><span class="hljs-keyword">class</span><span class="hljs-title">KafkaController</span> {<!-- --></span><span class="hljs-keyword">private</span><span class="hljs-keyword">final</span><span class="hljs-keyword">static</span> Logger logger = LoggerFactory.getLogger(KafkaController.class);<span class="hljs-annotation">@Autowired</span><span class="hljs-keyword">private</span>  KafkaTemplate&lt;String,String&gt; kafkaTemplate;<span class="hljs-annotation">@RequestMapping</span>(value =<span class="hljs-string">"/{topic}/send"</span>,method = RequestMethod.GET)<span class="hljs-keyword">public</span><span class="hljs-keyword">void</span><span class="hljs-title">sendMeessageTotopic1</span>(@PathVariable String topic,@<span class="hljs-title">RequestParam</span>(value =<span class="hljs-string">"partition"</span>,defaultValue =<span class="hljs-string">"0"</span>)<span class="hljs-keyword">int</span> partition) {         logger.info(<span class="hljs-string">"start send message to {}"</span>,topic);         kafkaTemplate.send(topic,partition,<span class="hljs-string">"你"</span>,<span class="hljs-string">"好"</span>);     } }</code></pre> <h2 id="第七步启动程序调用接口"><strong>第七步、启动程序、调用接口</strong></h2> <p>消息监听器只监听订阅的topic的特定分区的消息<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220608/fa489922b53cecdf3b0dd97c50b0845d.jpg" alt="Spring Boot整合Kafka的简单用例(@KafkaListener注解)"><br /> 源码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/NapWells/java_framework_learn/tree/master/springkafka2"  rel="nofollow">https://github.com/NapWells/java_framework_learn/tree/master/springkafka2</a></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-57291.htm">上海宠物领养日期查询网（上海宠物领养网站）</a></p>
                                        <p>下一个：<a href="/news/article-57859.htm">QCustomPlot开发笔记：QCustomPlot简介、下载以及基础绘图_在线工具</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-28303.htm" title="vue引用本地静态资源（图片、音频、视频）">vue引用本地静态资源（图片、音频、视频）</a></li>
                        <li class="py-2"><a href="/news/article-27841.htm" title="宠物食品代理怎么做的（宠物食品代工需要什么手续）">宠物食品代理怎么做的（宠物食品代工需要什么手续）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-1-free-shadowrocket-node.htm" title="1月1日 | 最新Shadowrocket/Clash/V2ray/SSR高速免费节点地址，最高速度18.7M/S，便宜机场推荐">1月1日 | 最新Shadowrocket/Clash/V2ray/SSR高速免费节点地址，最高速度18.7M/S，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-21369.htm" title="动物打疫苗后的不良反应是什么症状呢（动物打疫苗后的不良反应是什么症状呢图片）">动物打疫苗后的不良反应是什么症状呢（动物打疫苗后的不良反应是什么症状呢图片）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-25-clash-node-daily-updates.htm" title="1月25日 | 最新V2ray/Clash/Shadowrocket/SSR高速免费节点地址，最高速度20.2M/S，便宜机场推荐">1月25日 | 最新V2ray/Clash/Shadowrocket/SSR高速免费节点地址，最高速度20.2M/S，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-25983.htm" title="动物医院的拼音怎么拼 动物医院的拼音怎么拼写">动物医院的拼音怎么拼 动物医院的拼音怎么拼写</a></li>
                        <li class="py-2"><a href="/news/article-22744.htm" title="springboot 2.X Jar包部署到阿里云 配置SSL证书 启用HTTPS  通过域名访问">springboot 2.X Jar包部署到阿里云 配置SSL证书 启用HTTPS  通过域名访问</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-20-clash-windows.htm" title="12月20日 | 最新Shadowrocket/V2ray/Clash/SSR高速免费节点，最高速度22.5M/S，便宜机场推荐">12月20日 | 最新Shadowrocket/V2ray/Clash/SSR高速免费节点，最高速度22.5M/S，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-19996.htm" title="宠物粮食品牌名字4个字大全及图片（宠物粮食品牌名字4个字大全及图片及价格）">宠物粮食品牌名字4个字大全及图片（宠物粮食品牌名字4个字大全及图片及价格）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-11-free-ssr-node.htm" title="1月11日 | 最新Clash/V2ray/SSR/Shadowrocket高速免费节点地址，最高速度18.4M/S，便宜机场推荐">1月11日 | 最新Clash/V2ray/SSR/Shadowrocket高速免费节点地址，最高速度18.4M/S，便宜机场推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="col-lg-8 copy-footer-29">
                    ClashFree节点免费订阅站 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>